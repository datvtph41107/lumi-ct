import { BaseService } from "./base.service";
import type { ApiResponse } from "~/core/types/api.types";
import type { 
    AuditLog, 
    AuditLogFilters, 
    AuditLogListResponse, 
    AuditLogSummary 
} from "~/types/contract/audit-log.types";

export class AuditLogService extends BaseService {
    private readonly baseUrl = "/contracts";

    // ===== CONTRACT AUDIT LOGS =====
    async getContractAuditLogs(
        contractId: string, 
        filters?: AuditLogFilters, 
        pagination?: { page: number; limit: number }
    ): Promise<ApiResponse<AuditLogListResponse>> {
        const params = new URLSearchParams();
        
        if (filters?.action) params.append('action', filters.action);
        if (filters?.user_id) params.append('user_id', filters.user_id.toString());
        if (filters?.date_from) params.append('date_from', filters.date_from);
        if (filters?.date_to) params.append('date_to', filters.date_to);
        if (filters?.search) params.append('search', filters.search);
        
        if (pagination?.page) params.append('page', pagination.page.toString());
        if (pagination?.limit) params.append('limit', pagination.limit.toString());
        
        const url = `${this.baseUrl}/${contractId}/audit${params.toString() ? `?${params.toString()}` : ''}`;
        return this.request.private.get<AuditLogListResponse>(url);
    }

    async getContractAuditSummary(contractId: string): Promise<ApiResponse<AuditLogSummary>> {
        return this.request.private.get<AuditLogSummary>(
            `${this.baseUrl}/${contractId}/audit/summary`
        );
    }

    // ===== USER AUDIT LOGS =====
    async getUserAuditLogs(
        filters?: AuditLogFilters, 
        pagination?: { page: number; limit: number }
    ): Promise<ApiResponse<AuditLogListResponse>> {
        const params = new URLSearchParams();
        
        if (filters?.action) params.append('action', filters.action);
        if (filters?.date_from) params.append('date_from', filters.date_from);
        if (filters?.date_to) params.append('date_to', filters.date_to);
        if (filters?.search) params.append('search', filters.search);
        
        if (pagination?.page) params.append('page', pagination.page.toString());
        if (pagination?.limit) params.append('limit', pagination.limit.toString());
        
        const url = `${this.baseUrl}/audit/user${params.toString() ? `?${params.toString()}` : ''}`;
        return this.request.private.get<AuditLogListResponse>(url);
    }

    // ===== SYSTEM AUDIT LOGS =====
    async getSystemAuditLogs(
        filters?: AuditLogFilters, 
        pagination?: { page: number; limit: number }
    ): Promise<ApiResponse<AuditLogListResponse>> {
        const params = new URLSearchParams();
        
        if (filters?.action) params.append('action', filters.action);
        if (filters?.user_id) params.append('user_id', filters.user_id.toString());
        if (filters?.date_from) params.append('date_from', filters.date_from);
        if (filters?.date_to) params.append('date_to', filters.date_to);
        if (filters?.search) params.append('search', filters.search);
        
        if (pagination?.page) params.append('page', pagination.page.toString());
        if (pagination?.limit) params.append('limit', pagination.limit.toString());
        
        const url = `${this.baseUrl}/audit/system${params.toString() ? `?${params.toString()}` : ''}`;
        return this.request.private.get<AuditLogListResponse>(url);
    }

    // ===== HELPER METHODS =====
    async getRecentActivity(contractId: string, limit: number = 10): Promise<AuditLog[]> {
        try {
            const response = await this.getContractAuditLogs(contractId, undefined, { page: 1, limit });
            return response.data?.data || [];
        } catch (error) {
            console.error('Error fetching recent activity:', error);
            return [];
        }
    }

    async getActivityByAction(contractId: string, action: string): Promise<AuditLog[]> {
        try {
            const response = await this.getContractAuditLogs(contractId, { action });
            return response.data?.data || [];
        } catch (error) {
            console.error('Error fetching activity by action:', error);
            return [];
        }
    }

    async getActivityByUser(contractId: string, userId: number): Promise<AuditLog[]> {
        try {
            const response = await this.getContractAuditLogs(contractId, { user_id: userId });
            return response.data?.data || [];
        } catch (error) {
            console.error('Error fetching activity by user:', error);
            return [];
        }
    }

    async getActivityByDateRange(
        contractId: string, 
        dateFrom: string, 
        dateTo: string
    ): Promise<AuditLog[]> {
        try {
            const response = await this.getContractAuditLogs(contractId, { 
                date_from: dateFrom, 
                date_to: dateTo 
            });
            return response.data?.data || [];
        } catch (error) {
            console.error('Error fetching activity by date range:', error);
            return [];
        }
    }

    async searchActivity(contractId: string, searchTerm: string): Promise<AuditLog[]> {
        try {
            const response = await this.getContractAuditLogs(contractId, { search: searchTerm });
            return response.data?.data || [];
        } catch (error) {
            console.error('Error searching activity:', error);
            return [];
        }
    }

    // ===== UTILITY METHODS =====
    formatAuditLogDate(dateString: string): string {
        const date = new Date(dateString);
        return date.toLocaleString('vi-VN', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
        });
    }

    getActionDisplayName(action: string): string {
        const actionNames: Record<string, string> = {
            'CREATE_CONTRACT': 'T·∫°o h·ª£p ƒë·ªìng',
            'UPDATE_CONTRACT': 'C·∫≠p nh·∫≠t h·ª£p ƒë·ªìng',
            'DELETE_CONTRACT': 'X√≥a h·ª£p ƒë·ªìng',
            'PUBLISH_CONTRACT': 'Xu·∫•t b·∫£n h·ª£p ƒë·ªìng',
            'SAVE_STAGE': 'L∆∞u giai ƒëo·∫°n',
            'TRANSITION_STAGE': 'Chuy·ªÉn giai ƒëo·∫°n',
            'AUTO_SAVE': 'T·ª± ƒë·ªông l∆∞u',
            'ADD_COLLABORATOR': 'Th√™m c·ªông t√°c vi√™n',
            'UPDATE_COLLABORATOR_ROLE': 'C·∫≠p nh·∫≠t vai tr√≤',
            'REMOVE_COLLABORATOR': 'X√≥a c·ªông t√°c vi√™n',
            'TRANSFER_OWNERSHIP': 'Chuy·ªÉn quy·ªÅn s·ªü h·ªØu',
            'CREATE_VERSION': 'T·∫°o phi√™n b·∫£n',
            'PUBLISH_VERSION': 'Xu·∫•t b·∫£n phi√™n b·∫£n',
            'ROLLBACK_VERSION': 'Kh√¥i ph·ª•c phi√™n b·∫£n',
            'CREATE_MILESTONE': 'T·∫°o m·ªëc th·ªùi gian',
            'UPDATE_MILESTONE': 'C·∫≠p nh·∫≠t m·ªëc th·ªùi gian',
            'DELETE_MILESTONE': 'X√≥a m·ªëc th·ªùi gian',
            'CREATE_TASK': 'T·∫°o c√¥ng vi·ªác',
            'UPDATE_TASK': 'C·∫≠p nh·∫≠t c√¥ng vi·ªác',
            'DELETE_TASK': 'X√≥a c√¥ng vi·ªác',
            'UPLOAD_FILE': 'T·∫£i l√™n t·ªáp',
            'DELETE_FILE': 'X√≥a t·ªáp',
            'APPROVE_CONTRACT': 'Ph√™ duy·ªát h·ª£p ƒë·ªìng',
            'REJECT_CONTRACT': 'T·ª´ ch·ªëi h·ª£p ƒë·ªìng',
            'REQUEST_CHANGES': 'Y√™u c·∫ßu thay ƒë·ªïi',
            'CREATE_TEMPLATE': 'T·∫°o m·∫´u',
            'UPDATE_TEMPLATE': 'C·∫≠p nh·∫≠t m·∫´u',
            'DELETE_TEMPLATE': 'X√≥a m·∫´u',
            'CREATE_NOTIFICATION': 'T·∫°o th√¥ng b√°o',
            'CREATE_REMINDER': 'T·∫°o nh·∫Øc nh·ªü',
            'EXPORT_PDF': 'Xu·∫•t PDF',
            'EXPORT_DOCX': 'Xu·∫•t DOCX',
            'PRINT_CONTRACT': 'In h·ª£p ƒë·ªìng',
        };

        return actionNames[action] || action;
    }

    getActionIcon(action: string): string {
        const actionIcons: Record<string, string> = {
            'CREATE_CONTRACT': 'üìÑ',
            'UPDATE_CONTRACT': '‚úèÔ∏è',
            'DELETE_CONTRACT': 'üóëÔ∏è',
            'PUBLISH_CONTRACT': '‚úÖ',
            'SAVE_STAGE': 'üíæ',
            'TRANSITION_STAGE': '‚û°Ô∏è',
            'AUTO_SAVE': 'üîÑ',
            'ADD_COLLABORATOR': 'üë•',
            'UPDATE_COLLABORATOR_ROLE': 'üîÑ',
            'REMOVE_COLLABORATOR': '‚ùå',
            'TRANSFER_OWNERSHIP': 'üëë',
            'CREATE_VERSION': 'üìù',
            'PUBLISH_VERSION': '‚úÖ',
            'ROLLBACK_VERSION': '‚è™',
            'CREATE_MILESTONE': 'üéØ',
            'UPDATE_MILESTONE': '‚úèÔ∏è',
            'DELETE_MILESTONE': 'üóëÔ∏è',
            'CREATE_TASK': 'üìã',
            'UPDATE_TASK': '‚úèÔ∏è',
            'DELETE_TASK': 'üóëÔ∏è',
            'UPLOAD_FILE': 'üìÅ',
            'DELETE_FILE': 'üóëÔ∏è',
            'APPROVE_CONTRACT': '‚úÖ',
            'REJECT_CONTRACT': '‚ùå',
            'REQUEST_CHANGES': '‚ö†Ô∏è',
            'CREATE_TEMPLATE': 'üìÑ',
            'UPDATE_TEMPLATE': '‚úèÔ∏è',
            'DELETE_TEMPLATE': 'üóëÔ∏è',
            'CREATE_NOTIFICATION': 'üîî',
            'CREATE_REMINDER': '‚è∞',
            'EXPORT_PDF': 'üìÑ',
            'EXPORT_DOCX': 'üìÑ',
            'PRINT_CONTRACT': 'üñ®Ô∏è',
        };

        return actionIcons[action] || 'üìù';
    }
}

export const auditLogService = new AuditLogService();